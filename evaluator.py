__author__ = 'Liam'"""Module implements all evaluation methods"""# Threshold = 0.9# if float matches/rows > threshold#   if int matches = float matches#       INT#   else#       FLOAT# elif count types <10#   ENUM# elif average repetitions > 2#   ENUM# else#   STRING# float: ^\d+\.?\d*$# integer: ^[1-9]\d*$import configparserimport reconfig = configparser.ConfigParser()config.read('config.ini')class Evaluator(object):    def __init__(self, clean_data):        self.identify_type(clean_data)    @staticmethod    def identify_type(clean_data):        integer = re.compile(config['REGEX']['Integer'])        float = re.compile(config['REGEX']['Float'])        string = re.compile(config['REGEX']['String'])        for column in clean_data:            for row in column[1]:                if re.search(string, row) is None:                    column.append('Numeric')